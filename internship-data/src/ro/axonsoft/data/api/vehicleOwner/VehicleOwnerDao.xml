<?xml version="1.0" encoding="UTF-8"?> 
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"> 

<mapper namespace="ro.axonsoft.recrutare.data.api.vehicleOwner.VehicleOwnerDao">  
   
   <resultMap id="VehicleOwnerMap" type="MdfVehicleOwnerEntity"> 
           <id column="VEHICLE_OWNER_ID" property="vehicleOwnerId" />   
           <association property="record" javaType="MdfVehicleOwnerRecord" notNullColumn="RO_ID_CARD">
               <association property="basic" javaType="MdfVehicleOwner" notNullColumn="RO_ID_CARD">
                    <result column="RO_ID_CARD" property="roIdCard"/>
                    <result column="REG_PLATE" property="regPlate"/>
                    <result column="ISSUE_DATE" property="issueDate"/>
                    <result column="COMENTARIU" property="comentariu"/>
               </association>
               <association property="create" javaType="MdfActionAudit">
                    <id column="CRT_USR" property="author"/>
                    <id column="CRT_TMS" property="instant"/>
                </association>
           </association>
   </resultMap>
                            
   <select id="getUser" resultMap="UserMap">
        select distinct
            ID, 
            <include refid="usrColumns"/>
        from USR
        <where>
            <include refid="whereCriteria"/>
            <include refid="searchCriteria"/> 
        </where> 
        <include refid="sortCriteria"/>
        <include refid="pagination"/>
   </select>                         
               
   <insert id="addUser" keyProperty="id">
        insert into USR (
            <include refid="usrColumns"/> 
        ) VALUES (
            #{record.basic.firstName}, #{record.basic.lastName}, #{record.basic.username}, #{record.basic.email}, #{password},
            #{record.passwordUpdate.author}, #{record.passwordUpdate.instant}, #{record.create.author}, 
            #{record.create.instant}, #{record.update.author}, #{record.update.instant}
        ) 
   </insert>            

    <update id="updateUser">
        update USR
        <set>
            <if test = "firstName != null">F_NM=#{firstName},</if>
            <if test = "lastName != null">L_NM=#{lastName},</if>
            <if test = "email != null">EMAIL=#{email},</if>
            <if test = "password != null">PSSWD=#{password}, PASSWD_MDF_USR=#{audit.author}, PASSWD_MDF_TMS=#{audit.instant}</if>
            MDF_USR = #{audit.author}, 
            MDF_TMS = #{audit.instant}
        </set>
        <where>    
            <include refid="whereCriteria"/>
        </where>
    </update>
        
    <delete id="deleteUser">
        delete from USR
        <where>
            <include refid="whereCriteria"/>
         </where>
    </delete>
    
    <select id="countUser" resultType="Integer">
        select count(*)
        from USR
        <where>
            <include refid="whereCriteria"/>
            <include refid="searchCriteria"/>
         </where>
    </select>
    
    <sql id="whereCriteria">
        <if test="criteria != null">
            <if test="criteria.idIncl != null and !criteria.idIncl.empty">
                <foreach item="idInclItem" collection="criteria.idIncl" open="and ID in (" separator="," close=")">#{idInclItem}</foreach>
            </if>
            <if test="criteria.usernameIncl != null and !criteria.usernameIncl.empty">
                <foreach item="usrnmInclItem" collection="criteria.usernameIncl" open="and USRNM in (" separator="," close=")">#{usrnmInclItem}</foreach>
            </if>
         </if>         
    </sql>
            
    <sql id="sortCriteria">
        <if test="sort.size() > 0">
            order by 
            <foreach item="sortItem" index="index" collection="sort" separator=",">
                ${sortItem.criterion} ${sortItem.direction}
            </foreach>
        </if>
    </sql>        
    
    <sql id="pagination">
        <if test="pagination != null">
            limit #{pagination.pageSize}
            offset #{pagination.offset}       
        </if>
    </sql>

    <sql id="searchCriteria">
        <if test="search != null">
            <bind name="likePattern" value="'%' + search + '%'" />
            and  
            UPPER(USRNM) like UPPER(#{likePattern})
            or
            UPPER(F_NM) like UPPER(#{likePattern})
            or 
            UPPER(L_NM) like UPPER(#{likePattern})
            or 
            UPPER(EMAIL) like UPPER(#{likePattern})
        </if> 
    </sql>
    
    <sql id="usrColumns">
        F_NM, L_NM, USRNM, EMAIL, PASSWD, PASSWD_MDF_USR, PASSWD_MDF_TMS, CRT_USR, CRT_TMS, MDF_USR, MDF_TMS
    </sql>
    
</mapper>