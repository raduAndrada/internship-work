	buildscript {
	    repositories {
	        maven {
	          url 'https://plugins.gradle.org/m2/'
	        }
	      }
	    dependencies {
	        classpath "gradle.plugin.org.inferred:gradle-processors:1.2.11"
	    }
	}
	
	apply plugin : 'org.inferred.processors' 
	apply plugin: 'java'
	apply plugin: 'eclipse'
	apply plugin: 'jacoco'
	
	group = 'axonsoft'
	version = '0.0.1-SNAPSHOT'
	
	description = """internship"""
	
	sourceCompatibility = 1.8
	targetCompatibility = 1.8
	tasks.withType(JavaCompile) {
	    options.encoding = 'UTF-8'
	}
	
	sourceSets {
	   main {
	      java {
	         srcDir 'src'
	      }
	      resources {
	         srcDir 'src'
	      }
	   }
	    
	   test {
	      java {
	         srcDir 'test'
	      }
	      resources {
	         srcDir 'test'
	      }
	   }
	}
	
	
	
	repositories {
	     mavenCentral()
	}
	dependencies {
	    processor 'org.immutables:value:2.4.0'
	    processor 'org.immutables:serial:2.4.0'
	
	    compile group: 'com.esotericsoftware.yamlbeans', name: 'yamlbeans', version:'1.08'
	    compile group: 'com.google.guava', name: 'guava', version:'19.0'
	    
	    testCompile group: 'junit', name: 'junit', version:'4.12'
	    testCompile group: 'org.assertj', name: 'assertj-core', version:'3.8.0'
	    testCompile "org.easymock:easymock:3.4"
	}
	jacocoTestReport {
	    additionalSourceDirs = files(sourceSets.main.allSource.srcDirs)
	    sourceDirectories = files(sourceSets.main.allSource.srcDirs)
	    classDirectories = files(sourceSets.main.output)
	        reports {
	            html.enabled = true
	            xml.enabled = true
	            csv.enabled = false
	        }
	} 
	task jacocoRootReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
	    dependsOn = [project.test]
	    additionalSourceDirs = files(sourceSets.main.allSource.srcDirs)
	    sourceDirectories = files(sourceSets.main.allSource.srcDirs)
	    classDirectories = files(sourceSets.main.output)
	    executionData = files(jacocoTestReport.executionData)
	    reports {
	        html.enabled = true
	        xml.enabled = true
	        csv.enabled = false
	    }
	    onlyIf = {
	        true
	    }
	    doFirst {
	        executionData = files(executionData.findAll {
	            it.exists()
	        })
	    }
	}